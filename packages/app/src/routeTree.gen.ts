/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SignupImport } from './routes/signup'
import { Route as SigninImport } from './routes/signin'
import { Route as GroupsImport } from './routes/groups'
import { Route as GroupsGroupIdImport } from './routes/groups/$groupId'
import { Route as GroupsGroupIdFoldersFolderIdImport } from './routes/groups/$groupId/folders/$folderId'
import { Route as GroupsGroupIdChatsChatIdImport } from './routes/groups/$groupId/chats/$chatId'

// Create Virtual Routes

const GroupsGroupIdAdminSettingsLazyImport = createFileRoute(
  '/groups/$groupId/admin/settings',
)()
const GroupsGroupIdAdminMembersLazyImport = createFileRoute(
  '/groups/$groupId/admin/members',
)()
const GroupsGroupIdAdminInvitesLazyImport = createFileRoute(
  '/groups/$groupId/admin/invites',
)()
const GroupsGroupIdAdminChatsLazyImport = createFileRoute(
  '/groups/$groupId/admin/chats',
)()

// Create/Update Routes

const SignupRoute = SignupImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/signup.lazy').then((d) => d.Route))

const SigninRoute = SigninImport.update({
  id: '/signin',
  path: '/signin',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/signin.lazy').then((d) => d.Route))

const GroupsRoute = GroupsImport.update({
  id: '/groups',
  path: '/groups',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/groups.lazy').then((d) => d.Route))

const GroupsGroupIdRoute = GroupsGroupIdImport.update({
  id: '/$groupId',
  path: '/$groupId',
  getParentRoute: () => GroupsRoute,
} as any)

const GroupsGroupIdAdminSettingsLazyRoute =
  GroupsGroupIdAdminSettingsLazyImport.update({
    id: '/admin/settings',
    path: '/admin/settings',
    getParentRoute: () => GroupsGroupIdRoute,
  } as any).lazy(() =>
    import('./routes/groups/$groupId/admin/settings.lazy').then((d) => d.Route),
  )

const GroupsGroupIdAdminMembersLazyRoute =
  GroupsGroupIdAdminMembersLazyImport.update({
    id: '/admin/members',
    path: '/admin/members',
    getParentRoute: () => GroupsGroupIdRoute,
  } as any).lazy(() =>
    import('./routes/groups/$groupId/admin/members.lazy').then((d) => d.Route),
  )

const GroupsGroupIdAdminInvitesLazyRoute =
  GroupsGroupIdAdminInvitesLazyImport.update({
    id: '/admin/invites',
    path: '/admin/invites',
    getParentRoute: () => GroupsGroupIdRoute,
  } as any).lazy(() =>
    import('./routes/groups/$groupId/admin/invites.lazy').then((d) => d.Route),
  )

const GroupsGroupIdAdminChatsLazyRoute =
  GroupsGroupIdAdminChatsLazyImport.update({
    id: '/admin/chats',
    path: '/admin/chats',
    getParentRoute: () => GroupsGroupIdRoute,
  } as any).lazy(() =>
    import('./routes/groups/$groupId/admin/chats.lazy').then((d) => d.Route),
  )

const GroupsGroupIdFoldersFolderIdRoute =
  GroupsGroupIdFoldersFolderIdImport.update({
    id: '/folders/$folderId',
    path: '/folders/$folderId',
    getParentRoute: () => GroupsGroupIdRoute,
  } as any).lazy(() =>
    import('./routes/groups/$groupId/folders/$folderId.lazy').then(
      (d) => d.Route,
    ),
  )

const GroupsGroupIdChatsChatIdRoute = GroupsGroupIdChatsChatIdImport.update({
  id: '/chats/$chatId',
  path: '/chats/$chatId',
  getParentRoute: () => GroupsGroupIdRoute,
} as any).lazy(() =>
  import('./routes/groups/$groupId/chats/$chatId.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/groups': {
      id: '/groups'
      path: '/groups'
      fullPath: '/groups'
      preLoaderRoute: typeof GroupsImport
      parentRoute: typeof rootRoute
    }
    '/signin': {
      id: '/signin'
      path: '/signin'
      fullPath: '/signin'
      preLoaderRoute: typeof SigninImport
      parentRoute: typeof rootRoute
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupImport
      parentRoute: typeof rootRoute
    }
    '/groups/$groupId': {
      id: '/groups/$groupId'
      path: '/$groupId'
      fullPath: '/groups/$groupId'
      preLoaderRoute: typeof GroupsGroupIdImport
      parentRoute: typeof GroupsImport
    }
    '/groups/$groupId/chats/$chatId': {
      id: '/groups/$groupId/chats/$chatId'
      path: '/chats/$chatId'
      fullPath: '/groups/$groupId/chats/$chatId'
      preLoaderRoute: typeof GroupsGroupIdChatsChatIdImport
      parentRoute: typeof GroupsGroupIdImport
    }
    '/groups/$groupId/folders/$folderId': {
      id: '/groups/$groupId/folders/$folderId'
      path: '/folders/$folderId'
      fullPath: '/groups/$groupId/folders/$folderId'
      preLoaderRoute: typeof GroupsGroupIdFoldersFolderIdImport
      parentRoute: typeof GroupsGroupIdImport
    }
    '/groups/$groupId/admin/chats': {
      id: '/groups/$groupId/admin/chats'
      path: '/admin/chats'
      fullPath: '/groups/$groupId/admin/chats'
      preLoaderRoute: typeof GroupsGroupIdAdminChatsLazyImport
      parentRoute: typeof GroupsGroupIdImport
    }
    '/groups/$groupId/admin/invites': {
      id: '/groups/$groupId/admin/invites'
      path: '/admin/invites'
      fullPath: '/groups/$groupId/admin/invites'
      preLoaderRoute: typeof GroupsGroupIdAdminInvitesLazyImport
      parentRoute: typeof GroupsGroupIdImport
    }
    '/groups/$groupId/admin/members': {
      id: '/groups/$groupId/admin/members'
      path: '/admin/members'
      fullPath: '/groups/$groupId/admin/members'
      preLoaderRoute: typeof GroupsGroupIdAdminMembersLazyImport
      parentRoute: typeof GroupsGroupIdImport
    }
    '/groups/$groupId/admin/settings': {
      id: '/groups/$groupId/admin/settings'
      path: '/admin/settings'
      fullPath: '/groups/$groupId/admin/settings'
      preLoaderRoute: typeof GroupsGroupIdAdminSettingsLazyImport
      parentRoute: typeof GroupsGroupIdImport
    }
  }
}

// Create and export the route tree

interface GroupsGroupIdRouteChildren {
  GroupsGroupIdChatsChatIdRoute: typeof GroupsGroupIdChatsChatIdRoute
  GroupsGroupIdFoldersFolderIdRoute: typeof GroupsGroupIdFoldersFolderIdRoute
  GroupsGroupIdAdminChatsLazyRoute: typeof GroupsGroupIdAdminChatsLazyRoute
  GroupsGroupIdAdminInvitesLazyRoute: typeof GroupsGroupIdAdminInvitesLazyRoute
  GroupsGroupIdAdminMembersLazyRoute: typeof GroupsGroupIdAdminMembersLazyRoute
  GroupsGroupIdAdminSettingsLazyRoute: typeof GroupsGroupIdAdminSettingsLazyRoute
}

const GroupsGroupIdRouteChildren: GroupsGroupIdRouteChildren = {
  GroupsGroupIdChatsChatIdRoute: GroupsGroupIdChatsChatIdRoute,
  GroupsGroupIdFoldersFolderIdRoute: GroupsGroupIdFoldersFolderIdRoute,
  GroupsGroupIdAdminChatsLazyRoute: GroupsGroupIdAdminChatsLazyRoute,
  GroupsGroupIdAdminInvitesLazyRoute: GroupsGroupIdAdminInvitesLazyRoute,
  GroupsGroupIdAdminMembersLazyRoute: GroupsGroupIdAdminMembersLazyRoute,
  GroupsGroupIdAdminSettingsLazyRoute: GroupsGroupIdAdminSettingsLazyRoute,
}

const GroupsGroupIdRouteWithChildren = GroupsGroupIdRoute._addFileChildren(
  GroupsGroupIdRouteChildren,
)

interface GroupsRouteChildren {
  GroupsGroupIdRoute: typeof GroupsGroupIdRouteWithChildren
}

const GroupsRouteChildren: GroupsRouteChildren = {
  GroupsGroupIdRoute: GroupsGroupIdRouteWithChildren,
}

const GroupsRouteWithChildren =
  GroupsRoute._addFileChildren(GroupsRouteChildren)

export interface FileRoutesByFullPath {
  '/groups': typeof GroupsRouteWithChildren
  '/signin': typeof SigninRoute
  '/signup': typeof SignupRoute
  '/groups/$groupId': typeof GroupsGroupIdRouteWithChildren
  '/groups/$groupId/chats/$chatId': typeof GroupsGroupIdChatsChatIdRoute
  '/groups/$groupId/folders/$folderId': typeof GroupsGroupIdFoldersFolderIdRoute
  '/groups/$groupId/admin/chats': typeof GroupsGroupIdAdminChatsLazyRoute
  '/groups/$groupId/admin/invites': typeof GroupsGroupIdAdminInvitesLazyRoute
  '/groups/$groupId/admin/members': typeof GroupsGroupIdAdminMembersLazyRoute
  '/groups/$groupId/admin/settings': typeof GroupsGroupIdAdminSettingsLazyRoute
}

export interface FileRoutesByTo {
  '/groups': typeof GroupsRouteWithChildren
  '/signin': typeof SigninRoute
  '/signup': typeof SignupRoute
  '/groups/$groupId': typeof GroupsGroupIdRouteWithChildren
  '/groups/$groupId/chats/$chatId': typeof GroupsGroupIdChatsChatIdRoute
  '/groups/$groupId/folders/$folderId': typeof GroupsGroupIdFoldersFolderIdRoute
  '/groups/$groupId/admin/chats': typeof GroupsGroupIdAdminChatsLazyRoute
  '/groups/$groupId/admin/invites': typeof GroupsGroupIdAdminInvitesLazyRoute
  '/groups/$groupId/admin/members': typeof GroupsGroupIdAdminMembersLazyRoute
  '/groups/$groupId/admin/settings': typeof GroupsGroupIdAdminSettingsLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/groups': typeof GroupsRouteWithChildren
  '/signin': typeof SigninRoute
  '/signup': typeof SignupRoute
  '/groups/$groupId': typeof GroupsGroupIdRouteWithChildren
  '/groups/$groupId/chats/$chatId': typeof GroupsGroupIdChatsChatIdRoute
  '/groups/$groupId/folders/$folderId': typeof GroupsGroupIdFoldersFolderIdRoute
  '/groups/$groupId/admin/chats': typeof GroupsGroupIdAdminChatsLazyRoute
  '/groups/$groupId/admin/invites': typeof GroupsGroupIdAdminInvitesLazyRoute
  '/groups/$groupId/admin/members': typeof GroupsGroupIdAdminMembersLazyRoute
  '/groups/$groupId/admin/settings': typeof GroupsGroupIdAdminSettingsLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/groups'
    | '/signin'
    | '/signup'
    | '/groups/$groupId'
    | '/groups/$groupId/chats/$chatId'
    | '/groups/$groupId/folders/$folderId'
    | '/groups/$groupId/admin/chats'
    | '/groups/$groupId/admin/invites'
    | '/groups/$groupId/admin/members'
    | '/groups/$groupId/admin/settings'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/groups'
    | '/signin'
    | '/signup'
    | '/groups/$groupId'
    | '/groups/$groupId/chats/$chatId'
    | '/groups/$groupId/folders/$folderId'
    | '/groups/$groupId/admin/chats'
    | '/groups/$groupId/admin/invites'
    | '/groups/$groupId/admin/members'
    | '/groups/$groupId/admin/settings'
  id:
    | '__root__'
    | '/groups'
    | '/signin'
    | '/signup'
    | '/groups/$groupId'
    | '/groups/$groupId/chats/$chatId'
    | '/groups/$groupId/folders/$folderId'
    | '/groups/$groupId/admin/chats'
    | '/groups/$groupId/admin/invites'
    | '/groups/$groupId/admin/members'
    | '/groups/$groupId/admin/settings'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  GroupsRoute: typeof GroupsRouteWithChildren
  SigninRoute: typeof SigninRoute
  SignupRoute: typeof SignupRoute
}

const rootRouteChildren: RootRouteChildren = {
  GroupsRoute: GroupsRouteWithChildren,
  SigninRoute: SigninRoute,
  SignupRoute: SignupRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/groups",
        "/signin",
        "/signup"
      ]
    },
    "/groups": {
      "filePath": "groups.ts",
      "children": [
        "/groups/$groupId"
      ]
    },
    "/signin": {
      "filePath": "signin.ts"
    },
    "/signup": {
      "filePath": "signup.ts"
    },
    "/groups/$groupId": {
      "filePath": "groups/$groupId.tsx",
      "parent": "/groups",
      "children": [
        "/groups/$groupId/chats/$chatId",
        "/groups/$groupId/folders/$folderId",
        "/groups/$groupId/admin/chats",
        "/groups/$groupId/admin/invites",
        "/groups/$groupId/admin/members",
        "/groups/$groupId/admin/settings"
      ]
    },
    "/groups/$groupId/chats/$chatId": {
      "filePath": "groups/$groupId/chats/$chatId.ts",
      "parent": "/groups/$groupId"
    },
    "/groups/$groupId/folders/$folderId": {
      "filePath": "groups/$groupId/folders/$folderId.ts",
      "parent": "/groups/$groupId"
    },
    "/groups/$groupId/admin/chats": {
      "filePath": "groups/$groupId/admin/chats.lazy.tsx",
      "parent": "/groups/$groupId"
    },
    "/groups/$groupId/admin/invites": {
      "filePath": "groups/$groupId/admin/invites.lazy.tsx",
      "parent": "/groups/$groupId"
    },
    "/groups/$groupId/admin/members": {
      "filePath": "groups/$groupId/admin/members.lazy.tsx",
      "parent": "/groups/$groupId"
    },
    "/groups/$groupId/admin/settings": {
      "filePath": "groups/$groupId/admin/settings.lazy.tsx",
      "parent": "/groups/$groupId"
    }
  }
}
ROUTE_MANIFEST_END */
