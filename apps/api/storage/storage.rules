rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {

    //Utils
    function isMember(groupId, uid){
      return firestore.exists(/databases/(default)/documents/groups/$(groupId)/members/$(uid));
    }

    function isAdmin(groupId, uid){
      return firestore.get(/databases/(default)/documents/groups/$(groupId)).data.createdBy == uid;
    }

    function getInvite(groupId, inviteId){
      return firestore.get(/databases/(default)/documents/groups/$(groupId)/invites/$(inviteId));
    }

    function getFileResource(groupId, folderId, fileId) {
      return firestore.get(/databases/(default)/documents/groups/$(groupId)/folders/$(folderId)/files/$(fileId));
    }

    match /users/{userId} {
      allow read: if (
        request.auth != null
      );
      allow write: if (
        request.auth.uid == userId   
      );
    }

    match /groups/{groupId}/icon {
      allow write: if (
        isAdmin(groupId, request.auth.uid)
      );
      allow read: if (
        isMember(groupId, request.auth.uid)
      )
    }

    match /groups/{groupId}/folders/{folderId}/{fileId} {
      allow get, create: if (
        isMember(groupId, request.auth.uid)
      )
      allow delete: if (
        isAdmin(groupId, request.auth.uid)
        || getFileResource(groupId, folderId, fileId).data.createdBy == request.auth.uid
      )
    }
    
  }
}
