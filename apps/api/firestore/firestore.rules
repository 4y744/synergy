rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Utils
    function isMember(groupId, uid){
      return exists(/databases/$(database)/documents/groups/$(groupId)/members/$(uid));
    }

    function isAdmin(groupId, uid){
      return get(/databases/$(database)/documents/groups/$(groupId)).data.createdBy == uid;
    }

    function getInvite(groupId, inviteId){
      return get(/databases/$(database)/documents/groups/$(groupId)/invites/$(inviteId));
    }

    // Users
    match /users/{userId} {
      allow create: if (
        request.resource.data.createdAt == request.time
        && request.auth.uid == userId
        && request.resource.data.keys().hasOnly(["uid", "createdAt", "username"])
      );
      allow update: if (
        request.auth.uid == userId
        && request.resource.data.diff(resource.data).affectedKeys().hasOnly(["username", "pfp"])
      );
      allow delete: if (
        request.auth.uid == userId
      );
      allow get, list: if (
        request.auth != null
      );
    }

    // Groups
    match /groups/{groupId} {
      allow create: if (
        request.auth.uid != null
        && request.resource.data.createdBy == request.auth.uid
        && request.resource.data.createdAt == request.time
        && request.resource.data.keys().hasOnly(["name", "createdAt", "createdBy"])
      );
      allow update: if (
        resource.data.createdBy == request.auth.uid
        && request.resource.data.diff(resource.data).affectedKeys().hasOnly(["name", "icon"])
      );
      allow delete: if (
        resource.data.createdBy == request.auth.uid
      );
      allow get: if (
        resource.data.createdBy == request.auth.uid ||
        isMember(groupId, request.auth.uid)
      );
    }

    // Members
    match /groups/{groupId}/members/{memberId} {
      allow create: if (
        request.auth != null
        && request.resource.data.keys().hasOnly(["uid", "inviteId"])
        && (
          isAdmin(groupId, request.auth.uid)
          || getInvite(groupId, request.resource.data.inviteId).data.expiresAt > request.time
        )
      );
      allow update: if (
        (
          request.auth.uid == memberId
          || isAdmin(groupId, request.auth.uid)
        )
        && request.resource.data.diff(resource.data).affectedKeys().hasOnly(["inviteId"])
      );
      allow  delete: if (
        request.auth.uid == memberId
        || isAdmin(groupId, request.auth.uid)
      );
      allow get, list: if (
        isMember(groupId, request.auth.uid)
      );
    }

    match /{path=**}/members/{memberId} {
      allow get, list: if (
        request.auth.uid == resource.data.uid &&
        resource.data != null
      );
    }

    // Chats
    match /groups/{groupId}/chats/{chatId} {
      allow create: if (
        isAdmin(groupId, request.auth.uid) 
        && request.resource.data.keys().hasOnly(["name", "createdAt"])
      );
      allow update: if (
        isAdmin(groupId, request.auth.uid)
        && request.resource.data.diff(resource.data).affectedKeys().hasOnly(["name"])
      );
      allow delete: if (
        isAdmin(groupId, request.auth.uid)
      );
      allow get, list: if (
        isMember(groupId, request.auth.uid)
      );
    }

    // Messages
    match /groups/{groupId}/chats/{chatId}/messages/{messageId} {
      allow create: if (
        isMember(groupId, request.auth.uid)
        && request.resource.data.keys().hasOnly(["payload", "createdAt", "createdBy"])
      );
      allow update: if (
        (
          resource.data.createdBy == request.auth.uid
          || isAdmin(groupId, request.auth.uid)
        )
        && request.resource.data.diff(resource.data).affectedKeys().hasOnly(["payload"])
      )
      allow delete: if (
        isAdmin(groupId, request.auth.uid) 
      )
      allow get, list: if (
        isMember(groupId, request.auth.uid)
      )
    }

    // Folder
    match /groups/{groupId}/folders/{folderId} {
     allow create: if (
        isAdmin(groupId, request.auth.uid) 
        && request.resource.data.keys().hasOnly(["name", "createdAt"])
      );
      allow update: if (
        isAdmin(groupId, request.auth.uid)
        && request.resource.data.diff(resource.data).affectedKeys().hasOnly(["name"])
      );
      allow delete: if (
        isAdmin(groupId, request.auth.uid)
      );
      allow get, list: if (
        isMember(groupId, request.auth.uid)
      );
    }

    // Files
    match /groups/{groupId}/folders/{folderId}/files/{fileId} {
      allow create: if (
        isMember(groupId, request.auth.uid)
        && request.resource.data.keys().hasOnly(["name", "url", "createdAt", "createdBy"])
      );
      // allow update: if ()
      allow delete: if (
        resource.data.createdBy == request.auth.uid
        || isAdmin(groupId, request.auth.uid)
      );
      allow get, list: if (
        isMember(groupId, request.auth.uid)
      );
    }

    // Invites
    match /groups/{groupId}/invites/{inviteId} {
      allow create: if (
        isAdmin(groupId, request.auth.uid)
        && request.resource.data.keys().hasOnly(["inviteId", "expiresAt"])
      )
      allow delete: if (
        isAdmin(groupId, request.auth.uid)
      );
      allow get, list: if (
        request.auth != null
      );
    }

    match /{path=**}/invites/{inviteId} {
      allow list: if (
        request.auth != null
      );
    }

  }
}