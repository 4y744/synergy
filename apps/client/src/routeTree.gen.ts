/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as authSignupImport } from './routes/(auth)/signup'
import { Route as authSigninImport } from './routes/(auth)/signin'
import { Route as appGroupsImport } from './routes/(app)/groups'
import { Route as appInviteInviteIdImport } from './routes/(app)/invite/$inviteId'
import { Route as appGroupsGroupIdImport } from './routes/(app)/groups/$groupId'
import { Route as appGroupsGroupIdFoldersFolderIdImport } from './routes/(app)/groups/$groupId/folders/$folderId'
import { Route as appGroupsGroupIdChatsChatIdImport } from './routes/(app)/groups/$groupId/chats/$chatId'
import { Route as appGroupsGroupIdAdminMembersImport } from './routes/(app)/groups/$groupId/admin/members'
import { Route as appGroupsGroupIdAdminInvitesImport } from './routes/(app)/groups/$groupId/admin/invites'

// Create Virtual Routes

const appGroupsIndexLazyImport = createFileRoute('/(app)/groups/')()
const appGroupsGroupIdIndexLazyImport = createFileRoute(
  '/(app)/groups/$groupId/',
)()
const appGroupsGroupIdAdminSettingsLazyImport = createFileRoute(
  '/(app)/groups/$groupId/admin/settings',
)()
const appGroupsGroupIdAdminFoldersLazyImport = createFileRoute(
  '/(app)/groups/$groupId/admin/folders',
)()
const appGroupsGroupIdAdminChatsLazyImport = createFileRoute(
  '/(app)/groups/$groupId/admin/chats',
)()

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const authSignupRoute = authSignupImport
  .update({
    id: '/(auth)/signup',
    path: '/signup',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() => import('./routes/(auth)/signup.lazy').then((d) => d.Route))

const authSigninRoute = authSigninImport
  .update({
    id: '/(auth)/signin',
    path: '/signin',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() => import('./routes/(auth)/signin.lazy').then((d) => d.Route))

const appGroupsRoute = appGroupsImport
  .update({
    id: '/(app)/groups',
    path: '/groups',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() => import('./routes/(app)/groups.lazy').then((d) => d.Route))

const appGroupsIndexLazyRoute = appGroupsIndexLazyImport
  .update({
    id: '/',
    path: '/',
    getParentRoute: () => appGroupsRoute,
  } as any)
  .lazy(() => import('./routes/(app)/groups/index.lazy').then((d) => d.Route))

const appInviteInviteIdRoute = appInviteInviteIdImport
  .update({
    id: '/(app)/invite/$inviteId',
    path: '/invite/$inviteId',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() =>
    import('./routes/(app)/invite/$inviteId.lazy').then((d) => d.Route),
  )

const appGroupsGroupIdRoute = appGroupsGroupIdImport
  .update({
    id: '/$groupId',
    path: '/$groupId',
    getParentRoute: () => appGroupsRoute,
  } as any)
  .lazy(() =>
    import('./routes/(app)/groups/$groupId.lazy').then((d) => d.Route),
  )

const appGroupsGroupIdIndexLazyRoute = appGroupsGroupIdIndexLazyImport
  .update({
    id: '/',
    path: '/',
    getParentRoute: () => appGroupsGroupIdRoute,
  } as any)
  .lazy(() =>
    import('./routes/(app)/groups/$groupId/index.lazy').then((d) => d.Route),
  )

const appGroupsGroupIdAdminSettingsLazyRoute =
  appGroupsGroupIdAdminSettingsLazyImport
    .update({
      id: '/admin/settings',
      path: '/admin/settings',
      getParentRoute: () => appGroupsGroupIdRoute,
    } as any)
    .lazy(() =>
      import('./routes/(app)/groups/$groupId/admin/settings.lazy').then(
        (d) => d.Route,
      ),
    )

const appGroupsGroupIdAdminFoldersLazyRoute =
  appGroupsGroupIdAdminFoldersLazyImport
    .update({
      id: '/admin/folders',
      path: '/admin/folders',
      getParentRoute: () => appGroupsGroupIdRoute,
    } as any)
    .lazy(() =>
      import('./routes/(app)/groups/$groupId/admin/folders.lazy').then(
        (d) => d.Route,
      ),
    )

const appGroupsGroupIdAdminChatsLazyRoute = appGroupsGroupIdAdminChatsLazyImport
  .update({
    id: '/admin/chats',
    path: '/admin/chats',
    getParentRoute: () => appGroupsGroupIdRoute,
  } as any)
  .lazy(() =>
    import('./routes/(app)/groups/$groupId/admin/chats.lazy').then(
      (d) => d.Route,
    ),
  )

const appGroupsGroupIdFoldersFolderIdRoute =
  appGroupsGroupIdFoldersFolderIdImport
    .update({
      id: '/folders/$folderId',
      path: '/folders/$folderId',
      getParentRoute: () => appGroupsGroupIdRoute,
    } as any)
    .lazy(() =>
      import('./routes/(app)/groups/$groupId/folders/$folderId.lazy').then(
        (d) => d.Route,
      ),
    )

const appGroupsGroupIdChatsChatIdRoute = appGroupsGroupIdChatsChatIdImport
  .update({
    id: '/chats/$chatId',
    path: '/chats/$chatId',
    getParentRoute: () => appGroupsGroupIdRoute,
  } as any)
  .lazy(() =>
    import('./routes/(app)/groups/$groupId/chats/$chatId.lazy').then(
      (d) => d.Route,
    ),
  )

const appGroupsGroupIdAdminMembersRoute = appGroupsGroupIdAdminMembersImport
  .update({
    id: '/admin/members',
    path: '/admin/members',
    getParentRoute: () => appGroupsGroupIdRoute,
  } as any)
  .lazy(() =>
    import('./routes/(app)/groups/$groupId/admin/members.lazy').then(
      (d) => d.Route,
    ),
  )

const appGroupsGroupIdAdminInvitesRoute = appGroupsGroupIdAdminInvitesImport
  .update({
    id: '/admin/invites',
    path: '/admin/invites',
    getParentRoute: () => appGroupsGroupIdRoute,
  } as any)
  .lazy(() =>
    import('./routes/(app)/groups/$groupId/admin/invites.lazy').then(
      (d) => d.Route,
    ),
  )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/(app)/groups': {
      id: '/(app)/groups'
      path: '/groups'
      fullPath: '/groups'
      preLoaderRoute: typeof appGroupsImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/signin': {
      id: '/(auth)/signin'
      path: '/signin'
      fullPath: '/signin'
      preLoaderRoute: typeof authSigninImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/signup': {
      id: '/(auth)/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof authSignupImport
      parentRoute: typeof rootRoute
    }
    '/(app)/groups/$groupId': {
      id: '/(app)/groups/$groupId'
      path: '/$groupId'
      fullPath: '/groups/$groupId'
      preLoaderRoute: typeof appGroupsGroupIdImport
      parentRoute: typeof appGroupsImport
    }
    '/(app)/invite/$inviteId': {
      id: '/(app)/invite/$inviteId'
      path: '/invite/$inviteId'
      fullPath: '/invite/$inviteId'
      preLoaderRoute: typeof appInviteInviteIdImport
      parentRoute: typeof rootRoute
    }
    '/(app)/groups/': {
      id: '/(app)/groups/'
      path: '/'
      fullPath: '/groups/'
      preLoaderRoute: typeof appGroupsIndexLazyImport
      parentRoute: typeof appGroupsImport
    }
    '/(app)/groups/$groupId/': {
      id: '/(app)/groups/$groupId/'
      path: '/'
      fullPath: '/groups/$groupId/'
      preLoaderRoute: typeof appGroupsGroupIdIndexLazyImport
      parentRoute: typeof appGroupsGroupIdImport
    }
    '/(app)/groups/$groupId/admin/invites': {
      id: '/(app)/groups/$groupId/admin/invites'
      path: '/admin/invites'
      fullPath: '/groups/$groupId/admin/invites'
      preLoaderRoute: typeof appGroupsGroupIdAdminInvitesImport
      parentRoute: typeof appGroupsGroupIdImport
    }
    '/(app)/groups/$groupId/admin/members': {
      id: '/(app)/groups/$groupId/admin/members'
      path: '/admin/members'
      fullPath: '/groups/$groupId/admin/members'
      preLoaderRoute: typeof appGroupsGroupIdAdminMembersImport
      parentRoute: typeof appGroupsGroupIdImport
    }
    '/(app)/groups/$groupId/chats/$chatId': {
      id: '/(app)/groups/$groupId/chats/$chatId'
      path: '/chats/$chatId'
      fullPath: '/groups/$groupId/chats/$chatId'
      preLoaderRoute: typeof appGroupsGroupIdChatsChatIdImport
      parentRoute: typeof appGroupsGroupIdImport
    }
    '/(app)/groups/$groupId/folders/$folderId': {
      id: '/(app)/groups/$groupId/folders/$folderId'
      path: '/folders/$folderId'
      fullPath: '/groups/$groupId/folders/$folderId'
      preLoaderRoute: typeof appGroupsGroupIdFoldersFolderIdImport
      parentRoute: typeof appGroupsGroupIdImport
    }
    '/(app)/groups/$groupId/admin/chats': {
      id: '/(app)/groups/$groupId/admin/chats'
      path: '/admin/chats'
      fullPath: '/groups/$groupId/admin/chats'
      preLoaderRoute: typeof appGroupsGroupIdAdminChatsLazyImport
      parentRoute: typeof appGroupsGroupIdImport
    }
    '/(app)/groups/$groupId/admin/folders': {
      id: '/(app)/groups/$groupId/admin/folders'
      path: '/admin/folders'
      fullPath: '/groups/$groupId/admin/folders'
      preLoaderRoute: typeof appGroupsGroupIdAdminFoldersLazyImport
      parentRoute: typeof appGroupsGroupIdImport
    }
    '/(app)/groups/$groupId/admin/settings': {
      id: '/(app)/groups/$groupId/admin/settings'
      path: '/admin/settings'
      fullPath: '/groups/$groupId/admin/settings'
      preLoaderRoute: typeof appGroupsGroupIdAdminSettingsLazyImport
      parentRoute: typeof appGroupsGroupIdImport
    }
  }
}

// Create and export the route tree

interface appGroupsGroupIdRouteChildren {
  appGroupsGroupIdIndexLazyRoute: typeof appGroupsGroupIdIndexLazyRoute
  appGroupsGroupIdAdminInvitesRoute: typeof appGroupsGroupIdAdminInvitesRoute
  appGroupsGroupIdAdminMembersRoute: typeof appGroupsGroupIdAdminMembersRoute
  appGroupsGroupIdChatsChatIdRoute: typeof appGroupsGroupIdChatsChatIdRoute
  appGroupsGroupIdFoldersFolderIdRoute: typeof appGroupsGroupIdFoldersFolderIdRoute
  appGroupsGroupIdAdminChatsLazyRoute: typeof appGroupsGroupIdAdminChatsLazyRoute
  appGroupsGroupIdAdminFoldersLazyRoute: typeof appGroupsGroupIdAdminFoldersLazyRoute
  appGroupsGroupIdAdminSettingsLazyRoute: typeof appGroupsGroupIdAdminSettingsLazyRoute
}

const appGroupsGroupIdRouteChildren: appGroupsGroupIdRouteChildren = {
  appGroupsGroupIdIndexLazyRoute: appGroupsGroupIdIndexLazyRoute,
  appGroupsGroupIdAdminInvitesRoute: appGroupsGroupIdAdminInvitesRoute,
  appGroupsGroupIdAdminMembersRoute: appGroupsGroupIdAdminMembersRoute,
  appGroupsGroupIdChatsChatIdRoute: appGroupsGroupIdChatsChatIdRoute,
  appGroupsGroupIdFoldersFolderIdRoute: appGroupsGroupIdFoldersFolderIdRoute,
  appGroupsGroupIdAdminChatsLazyRoute: appGroupsGroupIdAdminChatsLazyRoute,
  appGroupsGroupIdAdminFoldersLazyRoute: appGroupsGroupIdAdminFoldersLazyRoute,
  appGroupsGroupIdAdminSettingsLazyRoute:
    appGroupsGroupIdAdminSettingsLazyRoute,
}

const appGroupsGroupIdRouteWithChildren =
  appGroupsGroupIdRoute._addFileChildren(appGroupsGroupIdRouteChildren)

interface appGroupsRouteChildren {
  appGroupsGroupIdRoute: typeof appGroupsGroupIdRouteWithChildren
  appGroupsIndexLazyRoute: typeof appGroupsIndexLazyRoute
}

const appGroupsRouteChildren: appGroupsRouteChildren = {
  appGroupsGroupIdRoute: appGroupsGroupIdRouteWithChildren,
  appGroupsIndexLazyRoute: appGroupsIndexLazyRoute,
}

const appGroupsRouteWithChildren = appGroupsRoute._addFileChildren(
  appGroupsRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/groups': typeof appGroupsRouteWithChildren
  '/signin': typeof authSigninRoute
  '/signup': typeof authSignupRoute
  '/groups/$groupId': typeof appGroupsGroupIdRouteWithChildren
  '/invite/$inviteId': typeof appInviteInviteIdRoute
  '/groups/': typeof appGroupsIndexLazyRoute
  '/groups/$groupId/': typeof appGroupsGroupIdIndexLazyRoute
  '/groups/$groupId/admin/invites': typeof appGroupsGroupIdAdminInvitesRoute
  '/groups/$groupId/admin/members': typeof appGroupsGroupIdAdminMembersRoute
  '/groups/$groupId/chats/$chatId': typeof appGroupsGroupIdChatsChatIdRoute
  '/groups/$groupId/folders/$folderId': typeof appGroupsGroupIdFoldersFolderIdRoute
  '/groups/$groupId/admin/chats': typeof appGroupsGroupIdAdminChatsLazyRoute
  '/groups/$groupId/admin/folders': typeof appGroupsGroupIdAdminFoldersLazyRoute
  '/groups/$groupId/admin/settings': typeof appGroupsGroupIdAdminSettingsLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/signin': typeof authSigninRoute
  '/signup': typeof authSignupRoute
  '/invite/$inviteId': typeof appInviteInviteIdRoute
  '/groups': typeof appGroupsIndexLazyRoute
  '/groups/$groupId': typeof appGroupsGroupIdIndexLazyRoute
  '/groups/$groupId/admin/invites': typeof appGroupsGroupIdAdminInvitesRoute
  '/groups/$groupId/admin/members': typeof appGroupsGroupIdAdminMembersRoute
  '/groups/$groupId/chats/$chatId': typeof appGroupsGroupIdChatsChatIdRoute
  '/groups/$groupId/folders/$folderId': typeof appGroupsGroupIdFoldersFolderIdRoute
  '/groups/$groupId/admin/chats': typeof appGroupsGroupIdAdminChatsLazyRoute
  '/groups/$groupId/admin/folders': typeof appGroupsGroupIdAdminFoldersLazyRoute
  '/groups/$groupId/admin/settings': typeof appGroupsGroupIdAdminSettingsLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/(app)/groups': typeof appGroupsRouteWithChildren
  '/(auth)/signin': typeof authSigninRoute
  '/(auth)/signup': typeof authSignupRoute
  '/(app)/groups/$groupId': typeof appGroupsGroupIdRouteWithChildren
  '/(app)/invite/$inviteId': typeof appInviteInviteIdRoute
  '/(app)/groups/': typeof appGroupsIndexLazyRoute
  '/(app)/groups/$groupId/': typeof appGroupsGroupIdIndexLazyRoute
  '/(app)/groups/$groupId/admin/invites': typeof appGroupsGroupIdAdminInvitesRoute
  '/(app)/groups/$groupId/admin/members': typeof appGroupsGroupIdAdminMembersRoute
  '/(app)/groups/$groupId/chats/$chatId': typeof appGroupsGroupIdChatsChatIdRoute
  '/(app)/groups/$groupId/folders/$folderId': typeof appGroupsGroupIdFoldersFolderIdRoute
  '/(app)/groups/$groupId/admin/chats': typeof appGroupsGroupIdAdminChatsLazyRoute
  '/(app)/groups/$groupId/admin/folders': typeof appGroupsGroupIdAdminFoldersLazyRoute
  '/(app)/groups/$groupId/admin/settings': typeof appGroupsGroupIdAdminSettingsLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/groups'
    | '/signin'
    | '/signup'
    | '/groups/$groupId'
    | '/invite/$inviteId'
    | '/groups/'
    | '/groups/$groupId/'
    | '/groups/$groupId/admin/invites'
    | '/groups/$groupId/admin/members'
    | '/groups/$groupId/chats/$chatId'
    | '/groups/$groupId/folders/$folderId'
    | '/groups/$groupId/admin/chats'
    | '/groups/$groupId/admin/folders'
    | '/groups/$groupId/admin/settings'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/signin'
    | '/signup'
    | '/invite/$inviteId'
    | '/groups'
    | '/groups/$groupId'
    | '/groups/$groupId/admin/invites'
    | '/groups/$groupId/admin/members'
    | '/groups/$groupId/chats/$chatId'
    | '/groups/$groupId/folders/$folderId'
    | '/groups/$groupId/admin/chats'
    | '/groups/$groupId/admin/folders'
    | '/groups/$groupId/admin/settings'
  id:
    | '__root__'
    | '/'
    | '/(app)/groups'
    | '/(auth)/signin'
    | '/(auth)/signup'
    | '/(app)/groups/$groupId'
    | '/(app)/invite/$inviteId'
    | '/(app)/groups/'
    | '/(app)/groups/$groupId/'
    | '/(app)/groups/$groupId/admin/invites'
    | '/(app)/groups/$groupId/admin/members'
    | '/(app)/groups/$groupId/chats/$chatId'
    | '/(app)/groups/$groupId/folders/$folderId'
    | '/(app)/groups/$groupId/admin/chats'
    | '/(app)/groups/$groupId/admin/folders'
    | '/(app)/groups/$groupId/admin/settings'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  appGroupsRoute: typeof appGroupsRouteWithChildren
  authSigninRoute: typeof authSigninRoute
  authSignupRoute: typeof authSignupRoute
  appInviteInviteIdRoute: typeof appInviteInviteIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  appGroupsRoute: appGroupsRouteWithChildren,
  authSigninRoute: authSigninRoute,
  authSignupRoute: authSignupRoute,
  appInviteInviteIdRoute: appInviteInviteIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/(app)/groups",
        "/(auth)/signin",
        "/(auth)/signup",
        "/(app)/invite/$inviteId"
      ]
    },
    "/": {
      "filePath": "index.ts"
    },
    "/(app)/groups": {
      "filePath": "(app)/groups.ts",
      "children": [
        "/(app)/groups/$groupId",
        "/(app)/groups/"
      ]
    },
    "/(auth)/signin": {
      "filePath": "(auth)/signin.ts"
    },
    "/(auth)/signup": {
      "filePath": "(auth)/signup.ts"
    },
    "/(app)/groups/$groupId": {
      "filePath": "(app)/groups/$groupId.ts",
      "parent": "/(app)/groups",
      "children": [
        "/(app)/groups/$groupId/",
        "/(app)/groups/$groupId/admin/invites",
        "/(app)/groups/$groupId/admin/members",
        "/(app)/groups/$groupId/chats/$chatId",
        "/(app)/groups/$groupId/folders/$folderId",
        "/(app)/groups/$groupId/admin/chats",
        "/(app)/groups/$groupId/admin/folders",
        "/(app)/groups/$groupId/admin/settings"
      ]
    },
    "/(app)/invite/$inviteId": {
      "filePath": "(app)/invite/$inviteId.ts"
    },
    "/(app)/groups/": {
      "filePath": "(app)/groups/index.lazy.tsx",
      "parent": "/(app)/groups"
    },
    "/(app)/groups/$groupId/": {
      "filePath": "(app)/groups/$groupId/index.lazy.tsx",
      "parent": "/(app)/groups/$groupId"
    },
    "/(app)/groups/$groupId/admin/invites": {
      "filePath": "(app)/groups/$groupId/admin/invites.ts",
      "parent": "/(app)/groups/$groupId"
    },
    "/(app)/groups/$groupId/admin/members": {
      "filePath": "(app)/groups/$groupId/admin/members.ts",
      "parent": "/(app)/groups/$groupId"
    },
    "/(app)/groups/$groupId/chats/$chatId": {
      "filePath": "(app)/groups/$groupId/chats/$chatId.ts",
      "parent": "/(app)/groups/$groupId"
    },
    "/(app)/groups/$groupId/folders/$folderId": {
      "filePath": "(app)/groups/$groupId/folders/$folderId.ts",
      "parent": "/(app)/groups/$groupId"
    },
    "/(app)/groups/$groupId/admin/chats": {
      "filePath": "(app)/groups/$groupId/admin/chats.lazy.tsx",
      "parent": "/(app)/groups/$groupId"
    },
    "/(app)/groups/$groupId/admin/folders": {
      "filePath": "(app)/groups/$groupId/admin/folders.lazy.tsx",
      "parent": "/(app)/groups/$groupId"
    },
    "/(app)/groups/$groupId/admin/settings": {
      "filePath": "(app)/groups/$groupId/admin/settings.lazy.tsx",
      "parent": "/(app)/groups/$groupId"
    }
  }
}
ROUTE_MANIFEST_END */
